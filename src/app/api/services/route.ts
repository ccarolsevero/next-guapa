import { NextRequest, NextResponse } from 'next/server'
import connectDB from '@/lib/mongodb'
import Service from '@/models/Service'

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const professionalId = searchParams.get('professionalId')
    
    console.log('üîç Buscando servi√ßos do MongoDB...')
    console.log('üì° MONGODB_URI:', process.env.MONGODB_URI ? 'Configurada' : 'N√ÉO CONFIGURADA')
    console.log('üë§ ProfessionalId:', professionalId || 'Nenhum (todos os servi√ßos)')
    
    await connectDB()
    console.log('‚úÖ Conectado ao banco de dados')
    
    let services
    
    if (professionalId) {
      // Buscar servi√ßos espec√≠ficos do profissional
      const Professional = (await import('@/models/Professional')).default
      const professional = await Professional.findById(professionalId)
      
      if (!professional) {
        console.log('‚ùå Profissional n√£o encontrado:', professionalId)
        return NextResponse.json({ error: 'Profissional n√£o encontrado' }, { status: 404 })
      }
      
      console.log('üë§ Profissional encontrado:', professional.name)
      console.log('üìã Servi√ßos do profissional:', professional.services)
      
      if (!professional.services || professional.services.length === 0) {
        console.log('‚ùå Profissional n√£o tem servi√ßos cadastrados')
        return NextResponse.json({ error: 'Profissional n√£o tem servi√ßos cadastrados' }, { status: 404 })
      }
      
      // Buscar servi√ßos que correspondem aos nomes do profissional
      services = await Service.find({ 
        isActive: true,
        name: { $in: professional.services }
      }).sort({ category: 1, order: 1 })
      
      console.log('‚úÖ Servi√ßos do profissional encontrados:', services.length)
    } else {
      // Buscar todos os servi√ßos ativos
      services = await Service.find({ isActive: true }).sort({ category: 1, order: 1 })
      console.log('‚úÖ Todos os servi√ßos ativos encontrados:', services.length)
    }
    
    if (services.length === 0) {
      console.log('‚ùå Nenhum servi√ßo encontrado')
      return NextResponse.json({ error: 'Nenhum servi√ßo encontrado' }, { status: 404 })
    }
    
    console.log('üì¶ Retornando servi√ßos do banco:', services.length)
    return NextResponse.json(services)
  } catch (error) {
    console.error('‚ùå Erro ao buscar servi√ßos:', error)
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, category, description, price, order, isFeatured } = body

    console.log('Adicionando novo servi√ßo no MongoDB...')
    
    await connectDB()
    
    // Validar se a categoria existe
    const ServiceCategory = (await import('@/models/ServiceCategory')).default
    const categoryExists = await ServiceCategory.findOne({ 
      name: category, 
      isActive: true 
    })
    
    if (!categoryExists) {
      return NextResponse.json(
        { error: 'Categoria de servi√ßo n√£o encontrada ou inativa' },
        { status: 400 }
      )
    }
    
    const newService = await Service.create({
      name,
      category,
      description,
      price,
      order: order || 0,
      isActive: true,
      isFeatured: isFeatured || false
    })
    
    console.log('Servi√ßo adicionado com sucesso:', newService._id)
    
    return NextResponse.json(newService, { status: 201 })
  } catch (error) {
    console.error('Erro ao adicionar servi√ßo:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor', details: error instanceof Error ? error.message : 'Erro desconhecido' },
      { status: 500 }
    )
  }
}

export async function PUT(request: NextRequest) {
  try {
    const body = await request.json()
    const { id, ...updateData } = body

    console.log('Atualizando servi√ßo no MongoDB...')
    
    await connectDB()
    
    const updatedService = await Service.findByIdAndUpdate(
      id,
      updateData,
      { new: true, runValidators: true }
    )
    
    if (!updatedService) {
      return NextResponse.json(
        { error: 'Servi√ßo n√£o encontrado' },
        { status: 404 }
      )
    }
    
    console.log('Servi√ßo atualizado com sucesso:', updatedService._id)
    
    return NextResponse.json(updatedService)
  } catch (error) {
    console.error('Erro ao atualizar servi√ßo:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor', details: error instanceof Error ? error.message : 'Erro desconhecido' },
      { status: 500 }
    )
  }
}
