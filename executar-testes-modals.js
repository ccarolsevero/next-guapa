#!/usr/bin/env node

/**
 * Script principal para executar todos os testes de responsividade dos modals
 *
 * Uso:
 * node executar-testes-modals.js [opcao]
 *
 * Op√ß√µes:
 * - manual: Abre o teste manual no navegador
 * - automatico: Executa testes autom√°ticos (requer puppeteer)
 * - admin: Executa apenas testes dos modals administrativos
 * - todos: Executa todos os testes (padr√£o)
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

class ModalTestRunner {
  constructor() {
    this.projectRoot = __dirname;
    this.testResults = [];
  }

  async checkDependencies() {
    console.log('üîç Verificando depend√™ncias...\n');

    const packageJson = JSON.parse(
      fs.readFileSync(path.join(this.projectRoot, 'package.json'), 'utf8'),
    );
    const hasPuppeteer =
      packageJson.dependencies?.puppeteer ||
      packageJson.devDependencies?.puppeteer;

    if (!hasPuppeteer) {
      console.log('‚ö†Ô∏è  Puppeteer n√£o encontrado. Instalando...');
      await this.installPuppeteer();
    }

    console.log('‚úÖ Depend√™ncias verificadas\n');
  }

  async installPuppeteer() {
    return new Promise((resolve, reject) => {
      const install = spawn('npm', ['install', 'puppeteer', '--save-dev'], {
        cwd: this.projectRoot,
        stdio: 'inherit',
      });

      install.on('close', (code) => {
        if (code === 0) {
          console.log('‚úÖ Puppeteer instalado com sucesso\n');
          resolve();
        } else {
          console.log('‚ùå Erro ao instalar Puppeteer\n');
          reject(new Error('Falha na instala√ß√£o'));
        }
      });
    });
  }

  async startDevServer() {
    console.log('üöÄ Iniciando servidor de desenvolvimento...\n');

    return new Promise((resolve, reject) => {
      const server = spawn('npm', ['run', 'dev'], {
        cwd: this.projectRoot,
        stdio: 'pipe',
      });

      let serverReady = false;

      server.stdout.on('data', (data) => {
        const output = data.toString();
        console.log(output);

        if (
          output.includes('Ready') ||
          output.includes('started server') ||
          output.includes('Local:')
        ) {
          if (!serverReady) {
            serverReady = true;
            console.log('‚úÖ Servidor iniciado com sucesso\n');
            resolve(server);
          }
        }
      });

      server.stderr.on('data', (data) => {
        console.error(data.toString());
      });

      server.on('error', (error) => {
        console.error('‚ùå Erro ao iniciar servidor:', error);
        reject(error);
      });

      // Timeout de 30 segundos
      setTimeout(() => {
        if (!serverReady) {
          console.log(
            '‚ö†Ô∏è  Timeout ao iniciar servidor, continuando mesmo assim...\n',
          );
          resolve(server);
        }
      }, 30000);
    });
  }

  async runManualTest() {
    console.log('üì± Abrindo teste manual...\n');

    const manualTestPath = path.join(
      this.projectRoot,
      'testar-modals-manual.html',
    );

    if (!fs.existsSync(manualTestPath)) {
      console.log('‚ùå Arquivo de teste manual n√£o encontrado');
      return;
    }

    // Tentar abrir no navegador padr√£o
    const { exec } = require('child_process');
    const command =
      process.platform === 'win32'
        ? `start ${manualTestPath}`
        : process.platform === 'darwin'
        ? `open ${manualTestPath}`
        : `xdg-open ${manualTestPath}`;

    exec(command, (error) => {
      if (error) {
        console.log('‚ùå Erro ao abrir navegador:', error.message);
        console.log(`üìÅ Abra manualmente: ${manualTestPath}`);
      } else {
        console.log('‚úÖ Teste manual aberto no navegador');
      }
    });
  }

  async runAutomaticTests() {
    console.log('ü§ñ Executando testes autom√°ticos...\n');

    try {
      const {
        ModalResponsiveTester,
      } = require('./testar-modals-responsivo.js');
      const tester = new ModalResponsiveTester();

      await tester.init();
      await tester.runAllTests();
      tester.generateReport();
      await tester.cleanup();
    } catch (error) {
      console.error('‚ùå Erro nos testes autom√°ticos:', error.message);
    }
  }

  async runAdminTests() {
    console.log('üë®‚Äçüíº Executando testes dos modals administrativos...\n');

    try {
      const {
        AdminModalResponsiveTester,
      } = require('./testar-modals-admin-responsivo.js');
      const tester = new AdminModalResponsiveTester();

      await tester.init();
      await tester.runAllTests();
      tester.generateReport();
      await tester.cleanup();
    } catch (error) {
      console.error('‚ùå Erro nos testes administrativos:', error.message);
    }
  }

  async runAllTests() {
    console.log('üéØ Executando todos os testes...\n');

    await this.runAutomaticTests();
    await this.runAdminTests();
  }

  async generateSummaryReport() {
    console.log('\nüìä RELAT√ìRIO FINAL DE TESTES DE MODALS\n');
    console.log('='.repeat(60));

    console.log('\nüìã RESUMO DOS TESTES REALIZADOS:');
    console.log('‚Ä¢ Teste manual: testar-modals-manual.html');
    console.log('‚Ä¢ Testes autom√°ticos: testar-modals-responsivo.js');
    console.log('‚Ä¢ Testes administrativos: testar-modals-admin-responsivo.js');

    console.log('\nüéØ MODALS TESTADOS:');
    console.log('‚Ä¢ LoginModal - Modal de login/cadastro');
    console.log('‚Ä¢ OnboardingModal - Modal de onboarding');
    console.log('‚Ä¢ CartModal - Modal do carrinho');
    console.log('‚Ä¢ CategoriasModal - Modal de categorias (admin)');
    console.log('‚Ä¢ ProdutosModal - Modal de produtos (admin)');
    console.log('‚Ä¢ ServicosModal - Modal de servi√ßos (admin)');
    console.log('‚Ä¢ ClientessModal - Modal de clientes (admin)');

    console.log('\nüì± BREAKPOINTS TESTADOS:');
    console.log('‚Ä¢ iPhone SE: 375x667');
    console.log('‚Ä¢ iPhone 11 Pro Max: 414x896');
    console.log('‚Ä¢ iPad: 768x1024');
    console.log('‚Ä¢ iPad Pro: 1024x1366');
    console.log('‚Ä¢ Desktop: 1280x720');
    console.log('‚Ä¢ Desktop Large: 1920x1080');

    console.log('\nüí° PR√ìXIMOS PASSOS:');
    console.log('1. Revisar resultados dos testes');
    console.log('2. Corrigir problemas identificados');
    console.log('3. Testar em dispositivos reais');
    console.log('4. Implementar melhorias sugeridas');
    console.log('5. Validar usabilidade final');
  }

  async run(option = 'todos') {
    console.log('üß™ INICIANDO TESTES DE RESPONSIVIDADE DOS MODALS\n');
    console.log('='.repeat(60));

    try {
      await this.checkDependencies();

      let server = null;

      // Iniciar servidor apenas se necess√°rio
      if (option !== 'manual') {
        try {
          server = await this.startDevServer();
          await new Promise((resolve) => setTimeout(resolve, 5000)); // Aguardar servidor estabilizar
        } catch (error) {
          console.log('‚ö†Ô∏è  Erro ao iniciar servidor, continuando sem ele...');
        }
      }

      switch (option) {
        case 'manual':
          await this.runManualTest();
          break;
        case 'automatico':
          await this.runAutomaticTests();
          break;
        case 'admin':
          await this.runAdminTests();
          break;
        case 'todos':
        default:
          await this.runAllTests();
          break;
      }

      await this.generateSummaryReport();
    } catch (error) {
      console.error('‚ùå Erro durante execu√ß√£o dos testes:', error);
    } finally {
      // Fechar servidor se foi iniciado
      if (server) {
        console.log('\nüõë Fechando servidor...');
        server.kill();
      }
    }
  }
}

// Fun√ß√£o principal
async function main() {
  const option = process.argv[2] || 'todos';

  const validOptions = ['manual', 'automatico', 'admin', 'todos'];
  if (!validOptions.includes(option)) {
    console.log('‚ùå Op√ß√£o inv√°lida. Use uma das seguintes:');
    console.log('‚Ä¢ manual - Abre teste manual no navegador');
    console.log('‚Ä¢ automatico - Executa testes autom√°ticos');
    console.log('‚Ä¢ admin - Executa testes dos modals administrativos');
    console.log('‚Ä¢ todos - Executa todos os testes (padr√£o)');
    process.exit(1);
  }

  const runner = new ModalTestRunner();
  await runner.run(option);
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { ModalTestRunner };
