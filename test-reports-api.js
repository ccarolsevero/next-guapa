const { MongoClient } = require('mongodb');
require('dotenv').config({ path: '.env.local' });

const uri = process.env.MONGODB_URI;
const dbName = process.env.DB_NAME || 'guapa';

async function testReportsAPI() {
  if (!uri) {
    console.error('MONGODB_URI n√£o est√° definida no .env.local');
    return;
  }

  const client = new MongoClient(uri);
  
  try {
    await client.connect();
    console.log('‚úÖ Conectado ao MongoDB');
    
    const db = client.db(dbName);
    
    // Testar se as cole√ß√µes existem
    const collections = await db.listCollections().toArray();
    console.log('üìÅ Cole√ß√µes dispon√≠veis:', collections.map(c => c.name));
    
    // Testar se h√° dados nas cole√ß√µes principais
    const finalizacoesCount = await db.collection('finalizacoes').countDocuments();
    console.log('üìä Total de finaliza√ß√µes:', finalizacoesCount);
    
    const clientsCount = await db.collection('clients').countDocuments();
    console.log('üë• Total de clientes:', clientsCount);
    
    const professionalsCount = await db.collection('professionals').countDocuments();
    console.log('üë®‚Äç‚öïÔ∏è Total de profissionais:', professionalsCount);
    
    const servicesCount = await db.collection('services').countDocuments();
    console.log('‚úÇÔ∏è Total de servi√ßos:', servicesCount);
    
    // Testar uma consulta simples
    if (finalizacoesCount > 0) {
      const sampleFinalizacao = await db.collection('finalizacoes').findOne();
      console.log('üìã Exemplo de finaliza√ß√£o:', {
        id: sampleFinalizacao._id,
        clienteNome: sampleFinalizacao.clienteNome,
        valorTotal: sampleFinalizacao.valorTotal,
        dataFinalizacao: sampleFinalizacao.dataFinalizacao
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao testar API:', error);
  } finally {
    await client.close();
  }
}

testReportsAPI();
