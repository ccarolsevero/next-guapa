generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Client {
  id           String        @id @default(cuid())
  name         String
  email        String?       @unique
  phone        String
  birthDate    DateTime?
  address      String?
  password     String?
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  payments     Payment[]

  @@map("clients")
}

model Professional {
  id           String                @id @default(cuid())
  name         String
  email        String?               @unique
  phone        String?
  bio          String?
  specialties  String
  imageUrl     String?
  isActive     Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  appointments Appointment[]
  gallery      ProfessionalGallery[]
  services     Service[]             @relation("ProfessionalToService")

  @@map("professionals")
}

model Service {
  id            String         @id @default(cuid())
  name          String
  description   String?
  duration      Int
  price         Float
  category      String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment[]
  serviceTypes  ServiceType[]
  professionals Professional[] @relation("ProfessionalToService")

  @@map("services")
}

model ServiceType {
  id           String        @id @default(cuid())
  name         String
  description  String?
  price        Float
  duration     Int
  serviceId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  service      Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_types")
}

model Appointment {
  id             String            @id @default(cuid())
  clientId       String
  professionalId String
  serviceId      String
  serviceTypeId  String?
  date           DateTime
  startTime      String
  endTime        String
  status         AppointmentStatus @default(SCHEDULED)
  notes          String?
  totalPrice     Float
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  client         Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  professional   Professional      @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  service        Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceType    ServiceType?      @relation(fields: [serviceTypeId], references: [id])
  payments       Payment[]

  @@map("appointments")
}

model Payment {
  id            String        @id @default(cuid())
  appointmentId String
  clientId      String
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  appointment   Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  client        Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  salePrice   Float?
  categoryId  String
  imageUrl    String?
  stock       Int         @default(0)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  clientName  String
  clientEmail String?
  clientPhone String
  totalAmount Float
  status      OrderStatus @default(PENDING)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model HomeGallery {
  id        String   @id @default(cuid())
  imageUrl  String
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("home_gallery")
}

model ProfessionalGallery {
  id             String       @id @default(cuid())
  professionalId String
  imageUrl       String
  order          Int          @default(0)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("professional_gallery")
}

model SiteSettings {
  id          String   @id @default(cuid())
  siteName    String   @default("Espa√ßo Guapa")
  description String?
  address     String?
  whatsapp    String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

enum UserRole {
  ADMIN
  PROFESSIONAL
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentMethod {
  CASH
  PIX
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
