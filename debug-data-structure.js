const { MongoClient } = require('mongodb');

async function debugDataStructure() {
  const client = new MongoClient(
    process.env.MONGODB_URI || 'mongodb://localhost:27017/nextjs-guapa',
  );

  try {
    await client.connect();
    console.log('‚úÖ Conectado ao MongoDB');

    const db = client.db();

    // Verificar estrutura das finaliza√ß√µes
    const finalizacao = await db.collection('finalizacoes').findOne({});
    console.log('üìã Estrutura de uma finaliza√ß√£o:');
    console.log(JSON.stringify(finalizacao, null, 2));

    // Verificar se h√° finaliza√ß√µes com servicos
    const finalizacoesComServicos = await db
      .collection('finalizacoes')
      .find({
        'servicos.0': { $exists: true },
      })
      .limit(3)
      .toArray();

    console.log('\nüìä Finaliza√ß√µes com servi√ßos:');
    finalizacoesComServicos.forEach((f, i) => {
      console.log(`\n--- Finaliza√ß√£o ${i + 1} ---`);
      console.log('Cliente ID:', f.clienteId);
      console.log('Data:', f.dataCriacao);
      console.log('Servi√ßos:', JSON.stringify(f.servicos, null, 2));
    });

    // Verificar se h√° finaliza√ß√µes no per√≠odo
    const now = new Date();
    const startDate = new Date(
      now.getFullYear(),
      now.getMonth() - 6,
      now.getDate(),
    );

    const finalizacoesNoPeriodo = await db
      .collection('finalizacoes')
      .find({
        dataCriacao: { $gte: startDate, $lte: now },
      })
      .count();

    console.log(
      `\nüìÖ Finaliza√ß√µes no per√≠odo (√∫ltimos 6 meses): ${finalizacoesNoPeriodo}`,
    );
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await client.close();
  }
}

debugDataStructure();
